// Code generated by colgen v0.1.2; DO NOT EDIT.
package saldo

import (
	"saldo/pkg/db"
)

type Categories []Category

func (ll Categories) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Categories) Index() map[int]Category {
	r := make(map[int]Category, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewCategories(in []db.Category) Categories { return MapP(in, NewCategory) }

type Expenses []Expense

func (ll Expenses) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Expenses) Index() map[int]Expense {
	r := make(map[int]Expense, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewExpenses(in []db.Expense) Expenses { return MapP(in, NewExpense) }

type Users []User

func (ll Users) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Users) Index() map[int]User {
	r := make(map[int]User, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewUsers(in []db.User) Users { return MapP(in, NewUser) }
